# -*- coding: utf-8 -*-
"""SVM_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PT2OX5J8Gl_QEHvVj3x55Zo_xp-9e1X7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

!pip install opencv-python
import os
import cv2
import matplotlib.pyplot as plt

!pip install kaggle

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

import os
#data_dir='C:\\Users\\dhara\\Downloads\\brain_tumor'
#training_data_path=os.path.join(data_dir,'Training')
#testing_data_path=os.path.join(data_dir,'Testing'
!kaggle datasets download -d sartajbhuvaji/brain-tumor-classification-mri
!unzip /content/brain-tumor-classification-mri.zip
training_data_path='/content/Training'
testing_data_path='/content/Testing'
path=os.listdir(training_data_path)
classes={'no_tumor':0,'pituitary_tumor':1}
print(path)

import cv2
X=[]
Y=[]
for cls in classes:
  pth='/content/Training/'+cls
  for j in os.listdir(pth):
    img=cv2.imread(pth+'/'+j,0)
    img=cv2.resize(img,(200,200))
    X.append(img)
    Y.append(classes[cls])

X=np.array(X)
Y=np.array(Y)
X_updated=X.reshape(len(X),-1)

np.unique(Y)

pd.Series(Y).value_counts()

X.shape,X_updated.shape

#Visulalize data
plt.imshow(X[0],cmap='gray')

#prepare data
X_updated=X.reshape(len(X),-1)
X_updated.shape

#split data
xtrain,xtest,ytrain,ytest=train_test_split(X_updated,Y,random_state=10,test_size=0.2)

xtrain.shape,xtest.shape

#feature scaling
print(xtrain.max(),xtrain.min())
print(xtest.max(),xtest.min())
xtrain=xtrain/255
xtest=xtest/255
#print(xtrain.max(),xtrain.min())
#xtrain=xtrain/255
#xtest=xtest/255
print(xtrain.max(),xtrain.min())
print(xtest.max(),xtest.min())

#feature selection:PCA
from sklearn.decomposition import PCA

print(xtrain.shape,xtest.shape)
pca=PCA(.98)
pca_train=xtrain
pca_test=xtest

#train model
from sklearn.linear_model import LogisticRegression
#from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

import warnings
warnings.filterwarnings('ignore')
lg=LogisticRegression(C=0.1)
lg.fit(xtrain,ytrain)

sv=SVC()
sv.fit(xtrain,ytrain)

#Evaluation
print("Training Score:",lg.score(xtrain,ytrain))
print("Testing Score:",lg.score(xtest,ytest))

#prediction
pred=sv.predict(xtest)

misclassified=np.where(ytest!=pred)
misclassified

print("Total Misclassified Samples:",len(misclassified[0]))
print(pred[36],ytest[36])

#test model
dec={0:'No Tumor',1:'Positive Tumor'}

print(testing_data_path)
print(os.listdir(testing_data_path))

plt.figure(figsize=(12,8))
p=os.listdir('/content/Testing/')
c=1
for i in os.listdir(os.path.join('/content/Testing/no_tumor/'))[:9]:
  plt.subplot(3,3,c)
  img=cv2.imread(os.path.join('/content/Testing/no_tumor/'+i),0)
  #if img is None:
    #print(f"Failed to load image: {image_path}")
    #continue
  img1=cv2.resize(img,(200,200))
  img1=img1.reshape(1,-1)/255
  p=sv.predict(img1)
  plt.title(dec[p[0]])
  plt.imshow(img,cmap='gray') #vmax should be 255 for grayscale
  plt.axis('off')
  c+=1
#plt.show()

plt.figure(figsize=(12,8))
p=os.listdir('/content/Testing/')
c=1
for i in os.listdir('/content/Testing/pituitary_tumor/')[:16]:
  #for j in os.listdir(testing

  plt.subplot(4,4,c)
  img=cv2.imread('/content/Testing/pituitary_tumor/'+i,0)
  img1=cv2.resize(img,(200,200))
  img1=img1.reshape(1,-1)/255
  p=sv.predict(img1)
  plt.title(dec[p[0]])
  plt.imshow(img,cmap='gray')
  plt.axis('off')
  c+=1